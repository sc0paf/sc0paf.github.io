const buildings = {
    Generator: {
        name: 'Generator',
        description: 'Generates $1.',
        cost: 5,
        charges: 5,
        maxCharges: 5,
        amount: 2,
        upgrades: {
            generated: {
                name: 'Amount Generated',
                id: 'generated',
                description: 'Doubles the amount generated by this generator.',
                cost: 15,
                level: 1
            },
            charges: {
                name: 'Max Charges',
                id: 'charges',
                description: 'Doubles this generators charges.',
                cost: 25,
                level: 1
            }
        }
    },
    Multi: {
        name: 'Multi (todo)',
        description: 'Multiplies the next square.',
        cost: 10,
        charges: 5,
        maxCharges: 5,
        amount: 2,
        upgrades: {
            place: {
                name: 'place',
                description: 'placeholder (not implemented.)',
                cost: 25
            },
            place2: {
                name: 'place2',
                description: 'placeholdre2 (not implemented.)',
                cost: 100
            }
        }
    },
    Reverse: {
        name: 'Reverse (todo)',
        description: 'Reverses direction when hitting this square. (not implemented.)',
        cost: 25
    }
}




const boardUpgrades = {
    gameSpeed: {
        name: 'Game Speed',
        description: 'Squares move along quicker. (not implemented.)',
        cost: 100,
        levelMulti: 1.2
    },
    boardSize: {
        name: 'Add Layer',
        description: 'Add another layer to the grid.',
        cost: 50,
        levelMulti: 1.2
    }
}

function homeShopBuy(which) {
    console.log(which)
}

function drawCard(which, id) {
    cardHeader.innerHTML = ''
    cardBody.innerHTML = ''

    const square = player.squares[which].find(obj => obj.id === id)
    cardHeader.textContent = `${id} - ${square.type}`

    if (square.type === 'None') {

        // blank card
        cardBody.appendChild(drawCardBody('Nothing Here...', 'Build?'))

        for (const key in buildings) {
            let buildButton = drawCardButton(buildings[key])
            buildButton.addEventListener('click', () => {
                buyBuilding(buildings[key].name,square.id)
            })
            cardBody.appendChild(buildButton)
        }
    } else if(square.type === 'Home') {
        cardBody.appendChild(drawCardBody('Home','Shop'))

        for (const key in boardUpgrades) {
            let upgradeButton = drawCardButton(boardUpgrades[key])
            upgradeButton.addEventListener('click', () => {
                homeShopBuy(boardUpgrades[key])
            })
            cardBody.appendChild(upgradeButton)
        }

    } else {

        //todo: seperate this out into gameData to reuse
        if (square.type === 'Generator') {
            let chargeBtn = document.createElement('button')
            currentCardBtn = chargeBtn
            chargeBtn.textContent = `CHARGE [${square.charges} / ${square.maxCharges}]`
            chargeBtn.classList.add('cardButtons')
            chargeBtn.addEventListener('click', () => {
                if (square.charges < square.maxCharges) {
                square.charges++
                square.chargeEl.textContent = `${square.charges} charges`
                drawCard(which, id)
                }
            })
            let genAmt = document.createElement('p')
            genAmt.textContent = `Generating $${square.amount} per cycle.`
            cardBody.appendChild(chargeBtn)
            cardBody.appendChild(document.createElement('br'))
            cardBody.appendChild(genAmt)
            cardBody.appendChild(document.createElement('br'))

        }

        //cardBody.appendChild(drawCardBody(square.type, 'Upgrades'))
        let upgradeText = document.createElement('div')
        upgradeText.style.fontWeight = `bold`
        upgradeText.textContent = `Upgrades`
        cardBody.appendChild(upgradeText)

        for (const key in buildings[square.type].upgrades) {
            let upgradeButton = drawCardButton(buildings[square.type].upgrades[key])
            upgradeButton.addEventListener('click', () => {
                buyUpgrade(square, buildings[square.type].upgrades[key].id)
            })
            cardBody.appendChild(upgradeButton)
        }
    }
}

function buyUpgrade(square, upgrade) {
    console.log(`buy ${upgrade} on ${square.id}`)
    let layer = square.id.charAt(0)
    let index = square.id.charAt(1)
    if (player.money >= player.squares[layer][index].upgrades[upgrade].cost) {
        player.money -= buildings[square.type].upgrades[upgrade].cost
        if (upgrade === 'generated') {
            player.squares[layer][index].amount *= 2
        } else if (upgrade === 'charges') {
            player.squares[layer][index].maxCharges *= 2
            player.squares[layer][index].charges *= 2
        }
        let newCost = player.squares[layer][index].upgrades[upgrade].cost * (1.2 ** player.squares[layer][index].upgrades[upgrade].level)
        player.squares[layer][index].upgrades[upgrade].cost = newCost.toFixed(2)
        player.squares[layer][index].upgrades[upgrade].level++
        drawCard(layer, square.id)
    }
}


function drawCardBody(title, underText) {
    // generic card heading
    let frag = document.createDocumentFragment()
    let cardName = document.createElement('strong')
    cardName.appendChild(document.createTextNode(title))
    frag.appendChild(cardName)
    frag.appendChild(document.createElement('br'))
    let buttonsHeader = document.createElement('span')
    buttonsHeader.appendChild(document.createTextNode(underText))
    buttonsHeader.style.textDecoration = 'underline'
    frag.appendChild(buttonsHeader)

    return frag   
}

function drawCardButton(obj) {
    // generic card button
    let newButton = document.createElement('button')
    let title = document.createElement('strong')
    title.appendChild(document.createTextNode(obj.name))
    newButton.appendChild(title)
    newButton.appendChild(document.createElement('br'))
    let costText = document.createElement('em')
    costText.appendChild(document.createTextNode(`Cost : $${obj.cost}`))
    newButton.appendChild(costText)
    newButton.appendChild(document.createElement('br'))
    newButton.appendChild(document.createTextNode(obj.description))
    newButton.classList.add('cardButtons')

    return newButton
}